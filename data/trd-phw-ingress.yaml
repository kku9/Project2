#storageclass.yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
parameters:
  provisioningMode: efs-ap
  fileSystemId: fs-01c4a0f6cf827cabe
  directoryPerms: "700"
  gidRangeStart: "1000" # optional
  gidRangeEnd: "2000" # optional
  basePath: "/dynamic_provisioning" # optional
  subPathPattern: "${.PVC.namespace}/${.PVC.name}" # optional
  ensureUniqueDirectory: "true" # optional
  reuseAccessPoint: "false" # optional
---
# index-pvc.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-trdindex
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-01c4a0f6cf827cabe
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-trdindex
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-tomindex
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-01c4a0f6cf827cabe
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv-tomindex
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-01c4a0f6cf827cabe
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-tomindex
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 5Gi

---


# nginx-index.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trd-prd-index
  labels:
    app: index-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: index-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: index-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - index-app
            topologyKey: "kubernetes.io/hostname"
      containers:
      - image: 730335635262.dkr.ecr.ap-northeast-2.amazonaws.com/eks-image:v1.0
        name: trd-index
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 128Mi
            cpu: 100m
 #       livenessProbe:
 #          httpGet:
 #           path: /index.jsp
 #           port: 80
 #         initialDelaySeconds: 5
 #         periodSeconds: 5
 #       readinessProbe:
 #         httpGet:
 #           path: /index.jsp
 #           port: 80
 #         initialDelaySeconds: 5
 #         periodSeconds: 5

---

apiVersion: v1
kind: Service
metadata:
  name: trd-index-svc
spec:
  selector:
    app: index-app
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alb-test-demo
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:730335635262:certificate/98c294a6-aaa9-4e1e-9991-62df987b6807
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /index.html
        pathType: Prefix
        backend:
          service:
            name: alb-test-svc
            port:
              number: 80

---
# tom-index.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trd-tomindex
  labels:
    app: tomindex-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tomindex-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: tomindex-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - tomindex-app
            topologyKey: "kubernetes.io/hostname"
      containers:
      - image: 730335635262.dkr.ecr.ap-northeast-2.amazonaws.com/trd-tom:latest
        name: trd-tomindex
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: 256Mi
            cpu: 200m
          limits:
            memory: 256Mi
            cpu: 200m
 #       livenessProbe:
 #          httpGet:
 #           path: /session_check.jsp
 #           port: 8080
 #         initialDelaySeconds: 5
 #         periodSeconds: 5
 #       readinessProbe:
 #         httpGet:
 #           path: /session_check.jsp
 #           port: 8080
 #         initialDelaySeconds: 5
 #         periodSeconds: 5
        volumeMounts:
        - name: pv-tomindex
          mountPath: /data/index
      volumes:
      - name: pv-tomindex
        persistentVolumeClaim:
          claimName: pvc-tomindex

---

apiVersion: v1
kind: Service
metadata:
  name: tom-index-svc
spec:
  selector:
    app: tomindex-app
  type: ClusterIP
  clusterIP: 172.20.10.20
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
