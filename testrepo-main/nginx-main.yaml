apiVersion: apps/v1
kind: Deployment
metadata:
  name: 1st-web
  labels:
    app: web-app # label을 web-app로 설정 
                 # nginx-sign deployment, nginx-order deployment와 label 구분
                 # nginx-sign 디플로이먼트 레이블 정보: sign: sign-app
                 # nginx-order 디플로이먼트 레이블 정보: order: order-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
      
# RollingUpdate 전략 설정  
# -->  가용성을 살리면서 무중단 배포가 진행되는 것을 목표로 했습니다.

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - image: jinwoo0824/web:v1.4
        name: web
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: 128Mi
            cpu: 100m
# 첫 시도에는 5초 후에, 이후 5초 간격으로 컨테이너의 실행 상태를 체크하도록 설정했습니다.
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

# 처음에는 5초 후에, 이후 5초 간격으로 컨테이너 준비 상태를 체크하도록 설정했습니다.
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5


        volumeMounts:
        - name: pvcweb
          mountPath: /1st-web
      volumes:
      - name: pvcweb
        persistentVolumeClaim:
          claimName: pvcweb
      nodeSelector:
        app: web-app

---

apiVersion: v1
kind: Service
metadata:
  name: web-svc
spec:
  selector:
    app: web-app # Node Selector를 사용하여 "web-app" label로 등록된 Pod만 service 처리되게 하여
                 # node의 scheduling을 효율적으로 관리하고자 하였습니다.
  type: NodePort 
  clusterIP: 10.100.100.100
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      #nodePort: 31000
